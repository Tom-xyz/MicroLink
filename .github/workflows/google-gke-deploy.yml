# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy the API and Web services to GKE cluster

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-east4
  GKE_CLUSTER: microlink
  GKE_ZONE: us-east4
  DEPLOYMENT_NAME_API: microlink-api-deployment
  DEPLOYMENT_NAME_WEB: microlink-web-deployment
  REPOSITORY_API: microlink-api
  REPOSITORY_WEB: microlink-web
  IMAGE_API: docker-microlink-api
  IMAGE_WEB: docker-microlink-web

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/564303631352/locations/global/workloadIdentityPools/microlink-github-pool/providers/microlink-github-provider'
        service_account: 'microlink-sa@microlink-376220.iam.gserviceaccount.com'

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the WEB Docker image
    - name: Build web image
      run: |-
        docker build \
          -t docker-microlink-web -f Dockerfile_web \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_WEB/$IMAGE_WEB:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Build the API Docker image
    - name: Build API image
      run: |-
        docker build \
          -t docker-microlink-api -f Dockerfile_api \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_API/$IMAGE_API:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the WEB Docker image to Google Artifact Registry
    - name: Publish web image
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_WEB/$IMAGE_WEB:$GITHUB_SHA"

    # Push the API Docker image to Google Artifact Registry
    - name: Publish api image
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_API/$IMAGE_API:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the WEB Docker image to the GKE cluster
    - name: Deploy WEB
      run: |-
        # replacing the image name in the k8s template
        cd k8s/web-service
        ../../kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_WEB/IMAGE_WEB:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_WEB/$IMAGE_WEB:$GITHUB_SHA
        ../../kustomize build | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME_WEB
        kubectl get services -o wide
    # Deploy the API Docker image to the GKE cluster
    - name: Deploy API
      run: |-
        # replacing the image name in the k8s template
        cd k8s/api-service
        ../../kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_API/IMAGE_API:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_API/$IMAGE_API:$GITHUB_SHA
        ../../kustomize build | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME_API
        kubectl get services -o wide
    # Deploy the Redis cluster to the GKE cluster
    - name: Deploy Redis
      run: |-
        kubectl apply -f k8s/redis
        kubectl rollout status deployment/redis-deployment
        kubectl get services -o wide
    # Deploy the cluster config cluster to the GKE cluster
    - name: Deploy cluster config
      run: |-
        kubectl apply -f k8s/config
        kubectl get services -o wide